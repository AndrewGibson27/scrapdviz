{"version":3,"file":"static/webpack/static/development/pages/index.js.7ec93f61d5d4752af45a.hot-update.js","sources":["webpack:///./components/scrapd-grid.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport moment from 'moment';\nimport facepaint from 'facepaint';\nimport styled from '@emotion/styled';\nimport { Button, DatePicker, message, Table } from 'antd';\nimport { connect } from 'react-redux';\nimport { fetchDataAsync, selectDate } from '../redux/store';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nconst RangePicker = DatePicker.RangePicker;\n\n// Define responsive options.\nconst breakpoints = [1048];\nconst mq = facepaint(breakpoints.map(bp => `@media (min-width: ${bp}px)`));\n\nconst ControlDiv = styled.div({\n  display: 'flex',\n  flexWrap: 'wrap',\n  justifyContent: 'space-evenly',\n  alignItems: 'center',\n  margin: '1em 0'\n});\n\nconst ButtonDiv = styled.div({\n  // marginLeft: '0.5em',\n  // marginRight: '0.5em'\n});\n\nconst TableDiv = styled.div(\n  mq({\n    display: ['none', 'block']\n  })\n);\n\nconst success = () => {\n  message.success('Copied to clipoard');\n};\n\nconst json2csv = (items) => {\n  if (!items || items.length == 0) {\n    return \"\";\n  }\n  const replacer = (key, value) => value === null ? '' : value // specify how you want to handle null values here\n  const header = Object.keys(items[0])\n  let csv = items.map(row => header.map(fieldName => JSON.stringify(row[fieldName], replacer)).join(','))\n  csv.unshift(header.join(','))\n  csv = csv.join('\\n')\n  return csv\n};\n\nclass ScrapdGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.state = {\n      error: null,\n      isLoaded: false\n    };\n    this.columns = [\n      { title: 'Case', dataIndex: 'Case', key: 'Case' },\n      {\n        title: 'Crash',\n        dataIndex: 'Fatal crashes this year',\n        key: 'Fatal crashes this year',\n        sortDirections: ['descend'],\n        sorter: (a, b) => a['Fatal crashes this year'] - b['Fatal crashes this year']\n      },\n      {\n        title: 'Date',\n        dataIndex: 'Date',\n        key: 'Date',\n        defaultSortOrder: 'descend',\n        sorter: (a, b) => new moment(a.Date) - new moment(b.Date)\n      },\n      { title: 'Time', dataIndex: 'Time', key: 'Time' },\n      { title: 'Location', dataIndex: 'Location', key: 'Location' },\n      { title: 'First Name', dataIndex: 'First Name', key: 'First Name' },\n      { title: 'Last Name', dataIndex: 'Last Name', key: 'Last Name' },\n      { title: 'Ethnicity', dataIndex: 'Ethnicity', key: 'Ethnicity' },\n      { title: 'Gender', dataIndex: 'Gender', key: 'Gender' },\n      { title: 'DOB', dataIndex: 'DOB', key: 'DOB' },\n      { title: 'Age', dataIndex: 'Age', key: 'Age' }\n    ];\n  }\n\n  componentDidMount() {\n    const dateFilter = this.props.date_filter;\n    this.props.fetchDataAsync(dateFilter);\n    this.props.selectDate(dateFilter);\n  }\n\n  onChange(dates, dateStrings) {\n    console.log('From: ', dates[0], ', to: ', dates[1]);\n    console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\n    let dateFilter = { from_: dates[0], to: dates[1] };\n    this.props.fetchDataAsync(dateFilter);\n    this.props.selectDate(dateFilter);\n  }\n\n  render() {\n    return (\n      <div>\n        <ControlDiv>\n          <div>\n            <RangePicker\n              ranges={{\n                'Last month': [\n                  moment()\n                    .subtract(1, 'months')\n                    .startOf('month'),\n                  moment()\n                    .subtract(1, 'months')\n                    .endOf('month')\n                ],\n                'This Month': [moment().startOf('month'), moment().endOf('month')],\n                'Last year': [\n                  moment()\n                    .subtract(1, 'year')\n                    .startOf('year'),\n                  moment()\n                    .subtract(1, 'year')\n                    .endOf('year')\n                ],\n                'This year': [moment().startOf('year'), moment().endOf('year')]\n              }}\n              onChange={this.onChange}\n              defaultValue={[moment(this.props.date_filter.from_), moment(this.props.date_filter.to)]}\n            />\n          </div>\n          <ButtonDiv>\n            <CopyToClipboard text={json2csv(this.props.fatalities)}>\n              <Button type=\"primary\" size=\"small\" icon=\"copy\" onClick={success}>CSV</Button>\n            </CopyToClipboard>\n          </ButtonDiv>\n          <ButtonDiv>\n            <CopyToClipboard text={JSON.stringify(this.props.fatalities)}>\n              <Button size=\"small\" icon=\"copy\" onClick={success}>JSON</Button>\n            </CopyToClipboard>\n          </ButtonDiv>\n        </ControlDiv>\n        <TableDiv>\n          <Table columns={this.columns} dataSource={this.props.fatalities} />\n        </TableDiv>\n      </div>\n    );\n  }\n}\n\nScrapdGrid.propTypes = {\n  fetchDataAsync: PropTypes.func.isRequired,\n  selectDate: PropTypes.func.isRequired,\n  date_filter: PropTypes.object,\n  fatalities: PropTypes.array\n};\n\nconst mapStateToProps = state => {\n  const { date_filter, fatalities } = state;\n  return { date_filter, fatalities };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchDataAsync, selectDate }\n)(ScrapdGrid);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AA9BA;AAgCA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AAKA;AACA;AAQA;AACA;AAQA;AAlBA;AAoBA;AACA;AAtBA;AA0BA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAIA;;;;AA/FA;AACA;AAiGA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;;;;A","sourceRoot":""}